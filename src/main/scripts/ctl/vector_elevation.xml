<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:functions="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/functions.xml"
 xmlns:vector_elevation="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/vector_elevation.xml"
 xmlns:ccf="http://www.opengis.net/cite/complex"
 xmlns:cdf="http://www.opengis.net/cite/data"
 xmlns:cgf="http://www.opengis.net/cite/geometry"
 xmlns:citef="http://www.opengis.net/cite/functions"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

   <ctl:test name="vector_elevation:main">
      <ctl:param name="vector_elevation"/>
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Vector elevation request behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="vector_elevation:options-requirements">
            <ctl:with-param name="vector_elevation" select="$vector_elevation"/>
         </ctl:call-test>
         <ctl:call-test name="vector_elevation:dims">
            <ctl:with-param name="vector_elevation" select="$vector_elevation"/>
         </ctl:call-test>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:options-requirements">
      <ctl:param name="vector_elevation"/>
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The requirements for testing the selected options are met.</ctl:assertion>
      <ctl:code>
         <xsl:if test="$vector_elevation='vector_elevation'">
            <ctl:call-test name="vector_elevation:vector_elevation"/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:dims">
      <ctl:param name="vector_elevation"/>
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for dimensional data is correct.</ctl:assertion>
      <ctl:code>
         <xsl:if test="$vector_elevation='vector_elevation'">
            <ctl:call-test name="vector_elevation:geometry"/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:vector_elevation">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Lakes layer with a properly declared elevation dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Lakes']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='elevation'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Lakes found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Lakes layer does not have an elevation dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'CRS:88'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with units=&quot;CRS:88&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@unitSymbol != 'm'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with unitSymbol=&quot;m&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 0">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with multipleValues=&quot;false&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 1">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with nearestValue=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@default != '500'">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined with default=&quot;500&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',500,') and contains($extent, ',490,') and contains($extent, ',480,'))">
                  <ctl:message>Error: The elevation dimension for the cite:Lakes layer must be defined using extent value &quot;500,490,480&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for a geometric layer that supports the elevation dimension is correct.</ctl:assertion>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="//wms:Layer[wms:Title = 'cite:Lakes']/ancestor-or-self::wms:Layer/wms:Dimension[functions:to-lowercase(@name)='elevation']">
               <ctl:call-test name="vector_elevation:geometry-low"/>
               <ctl:call-test name="vector_elevation:geometry-med"/>
               <ctl:call-test name="vector_elevation:geometry-high"/>
               <ctl:call-test name="vector_elevation:geometry-multiple-values"/>
               <ctl:call-test name="vector_elevation:geometry-nearest-value"/>
               <ctl:call-test name="vector_elevation:geometry-default-value"/>
               <ctl:call-test name="vector_elevation:geometry-and-other-layer"/>
            </xsl:when>
            <xsl:otherwise>
               <ctl:message>No layers titled cite:Lakes that support the elevation dimension.</ctl:message>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-low">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the geometry at a low elevation is requested, the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=480 and verify that the response is correct.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">480</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="50" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="65" y="35" width="10" height="30">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="100" y="0" width="100" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 5000">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) != 10000">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-med">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the geometry at a medium elevation is requested, the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=490 and verify that the response is correct.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">490</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="40" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="60" y="30" width="15" height="45">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="60" y="60" width="60" height="10">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="100" y="0" width="100" height="50">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="130" y="50" width="70" height="50">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="parsers:count[1]/parsers:count != 4000">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[4]/parsers:count) != 5000">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[5]/parsers:count) != 3500">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-high">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the geometry at a high elevation is requested, the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=500 and verify that the response is correct.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">500</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="20" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="50" y="30" width="35" height="50">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="85" y="55" width="55" height="20">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                     <parsers:subimage x="170" y="0" width="30" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 2000">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[4]/parsers:count) != 3000">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-multiple-values">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the geometries for a list of elevations are requested and multiple values are not supported, the response is an exception with code=InvalidDimensionValue.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=500,480 and verify that the response is an exception with code=InvalidDimensionValue. </ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.4">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.single_vs_multiple</ctl:link>
      <ctl:link title="WMS 1.3.0 section C.4.1">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.incorrect</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">500,480</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not($response/ogc:ServiceExceptionReport/ogc:ServiceException[@code='InvalidDimensionValue'])">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-nearest-value">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a request for the geometry at an unadvertised elevation value is requested and support for nearest values is advertised, the nearest value is used and a warning header is set.</ctl:assertion>
      <ctl:comment>Method: Submit a request with ELEVATION=492 and verify that the response is equivalent to the 490 value and the "nearest value used" warning header is returned.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.4.3">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.nearest</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">492</ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:ImageParser>
                        <parsers:model value="RGB">
                           <parsers:subimage x="0" y="0" width="40" height="100">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="60" y="30" width="15" height="45">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="60" y="60" width="60" height="10">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="100" y="0" width="100" height="50">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="130" y="50" width="70" height="50">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                        </parsers:model>
                     </parsers:ImageParser>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:message>Content-type header is not corrrect</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:if test="not($response/response/headers/header[@name='Warning' and starts-with(functions:to-lowercase(.), '99 nearest value used: elevation=490') and starts-with(., '99 N')])">
            <ctl:message>A correct "Nearest value used" warning header was not set</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:for-each select="$response/response/content/parsers:ImageParser/parsers:model">
            <xsl:choose>
               <xsl:when test="parsers:count[1]/parsers:count != 4000">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[2]/parsers:count) != 0">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[3]/parsers:count) != 0">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[4]/parsers:count) != 5000">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[5]/parsers:count) != 3500">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-default-value">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the elevation parameter is missing but there is a default elevation value, the default value is used and a warning header is set.</ctl:assertion>
      <ctl:comment>Method: Submit a request without an ELEVATION parameter and verify that the response is equivalent to the default value and the "default value used" warning header is returned.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.4.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.default</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:ImageParser>
                        <parsers:model value="RGB">
                           <parsers:subimage x="0" y="0" width="20" height="100">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="50" y="30" width="35" height="50">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="85" y="55" width="55" height="20">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                           <parsers:subimage x="170" y="0" width="30" height="100">
                              <parsers:count bands="RGB" sample="0xffffff"/>
                           </parsers:subimage>
                        </parsers:model>
                     </parsers:ImageParser>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:message>Content-type header is not corrrect</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:if test="not($response/response/headers/header[@name='Warning' and starts-with(functions:to-lowercase(.), '99 default value used: elevation=500') and starts-with(., '99 D')])">
            <ctl:message>A correct "Default value used" warning header was not set</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:for-each select="$response/response/content/parsers:ImageParser/parsers:model">
            <xsl:choose>
               <xsl:when test="number(parsers:subimage[1]/parsers:count) != 2000">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[2]/parsers:count) != 0">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[3]/parsers:count) != 0">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
               <xsl:when test="number(parsers:subimage[4]/parsers:count) != 3000">
                  <ctl:message>Image is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:when>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="vector_elevation:geometry-and-other-layer">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a geometry layer that supports elevation and a layer that does not support elevation are both requested, the response is a map.</ctl:assertion>
      <ctl:comment>Method: Submit a request invloving both the Lakes layer and a layer that does not support the ELEVATION dimension and verify that the response is a map</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.5">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.applicability</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer1" select="string(//wms:Layer[wms:Title = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="layer2" select="string(//wms:Layer[wms:Title = 'cite:Streams']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.002,0.004,0</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer1)"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode($layer2)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ElEvAtIoN">480</ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:NullParser/>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

</ctl:package>
