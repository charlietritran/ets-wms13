<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:functions="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/functions.xml"
 xmlns:raster_elevation="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/raster_elevation.xml"
 xmlns:ccf="http://www.opengis.net/cite/complex"
 xmlns:cdf="http://www.opengis.net/cite/data"
 xmlns:cgf="http://www.opengis.net/cite/geometry"
 xmlns:citef="http://www.opengis.net/cite/functions"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

   <ctl:test name="raster_elevation:raster_elevation">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Raster elevation request behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="raster_elevation:options-requirements"/>
         <ctl:call-test name="raster_elevation:dims"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:options-requirements">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The requirements for testing the selected options are met.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="raster_elevation:raster_elevation"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:dims">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for dimensional data is correct.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="raster_elevation:terrain"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:raster_elevation">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Terrain layer with a properly declared elevation dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Terrain']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='elevation'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Terrain found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Terrain layer does not have an elevation dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'CRS:88'">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with units=&quot;CRS:88&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="$dim/@unitSymbol != 'm'">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with unitSymbol=&quot;m&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 1">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with multipleValues=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 0">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined with nearestValue=&quot;false&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',0/425/1,'))">
                  <ctl:message>Error: The elevation dimension for the cite:Terrain layer must be defined using extent value &quot;0/425/1&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for a raster layer that supports the elevation dimension is correct.</ctl:assertion>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="//wms:Layer[wms:Title = 'cite:Terrain']/ancestor-or-self::wms:Layer/wms:Dimension[functions:to-lowercase(@name)='elevation']">
               <ctl:call-test name="raster_elevation:terrain-low-range"/>
               <ctl:call-test name="raster_elevation:terrain-mid-range"/>
               <ctl:call-test name="raster_elevation:terrain-high-range"/>
               <ctl:call-test name="raster_elevation:terrain-low-and-high-ranges"/>
               <ctl:call-test name="raster_elevation:terrain-range-and-value"/>
               <ctl:call-test name="raster_elevation:terrain-value"/>
               <ctl:call-test name="raster_elevation:terrain-invalid"/>
               <ctl:call-test name="raster_elevation:terrain-default"/>
               <ctl:call-test name="raster_elevation:terrain-and-other-layer"/>
            </xsl:when>
            <xsl:otherwise>
               <ctl:message>No layers titled cite:Terrain that support the elevation dimension.</ctl:message>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-low-range">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations in a low range are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=0/200 and verify that the pixels in the "low spot" are solid and all the other pixels are transparent.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('0/200')"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="450" y="450" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 337500">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-mid-range">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations in a mid range are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=200/335 and verify that the pixels in the "low spot" and the "high spot" are transparent and all the other pixels are solid.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('200/335')"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="0" y="0" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="450" y="450" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 22500">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 22500">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) != 45000">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-high-range">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations in a high range are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=335/425 and verify that the pixels in the "low spot" are solid and all the other pixels are transparent.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('335/425')"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="0" y="0" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 337500">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-low-and-high-ranges">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations in a low range and a high range are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=0/200,335/425 and verify that the pixels in the "low spot" and the "high spot" are solid and all the other pixels are transparent.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('0/200')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode('335/425')"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="0" y="0" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="450" y="450" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) != 315000">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-range-and-value">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations in an interval range and at a single value are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=0/200,250 and verify that all of the pixels in the "low spot" as well as some of the other pixels are not transparent.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('0/200')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode('250')"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="0" y="0" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="450" y="450" width="150" height="150">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) != 22500">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) != 0">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="not(number(parsers:subimage[3]/parsers:count) &gt; 22500)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-value">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When elevations at a single value are requested, only the matching pixels are returned.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=250 and verify that some pixels in the response are not transparent.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">250</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:subimage x="0" y="0" width="600" height="600">
                        <parsers:count bands="A" sample="0"/>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:variable name="count" select="number(parsers:subimage[1]/parsers:count)"/>
            <xsl:if test="not($count &gt; 45000 and $count &lt; 360000)">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-invalid">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When an elevation outside of the advertised range is requested, the response is an exception with code=InvalidDimensionValue.</ctl:assertion>
      <ctl:comment>Method: Request ELEVATION=1000 and verify that the service returns an exception with code=InvalidDimensionValue.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.4.1">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.incorrect</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="ElEvAtIoN">1000</ctl:param>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not($response/ogc:ServiceExceptionReport/ogc:ServiceException[@code='InvalidDimensionValue'])">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-default">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When the elevation parameter is missing but there is a default elevation value, the default value is used and a warning header is set.</ctl:assertion>
      <ctl:comment>Method: Submit a request without an ELEVATION parameter and verify that the response is equivalent to the default value and the "default value used" warning header is returned.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.4.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.default</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.5,-0.5,0.5,0.5</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:ImageParser>
                        <parsers:model value="ARGB">
                           <parsers:subimage x="0" y="0" width="600" height="600">
                              <parsers:count bands="A" sample="0"/>
                           </parsers:subimage>
                        </parsers:model>
                     </parsers:ImageParser>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:message>Content-type header is not corrrect</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:if test="not($response/response/headers/header[@name='Warning' and starts-with(functions:to-lowercase(.), '99 default value used: elevation=0/425') and starts-with(., '99 D')])">
            <ctl:message>A correct "Default value used" warning header was not set</ctl:message>
            <ctl:fail/>
         </xsl:if>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:variable name="count" select="number(parsers:subimage[1]/parsers:count)"/>
            <xsl:if test="not($count != 0)">
               <ctl:message>Image is not correct</ctl:message>
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="raster_elevation:terrain-and-other-layer">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a terrain layer that supports elevation and a layer that does not support elevation are both requested, the response is a map.</ctl:assertion>
      <ctl:comment>Method: Submit a request involving both the Terrain layer and a layer that does not support the ELEVATION dimension and verify that the response is a map.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.5">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.applicability</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer1" select="string(//wms:Layer[wms:Title = 'cite:BasicPolygons']/wms:Name)"/>
         <xsl:variable name="layer2" select="string(//wms:Layer[wms:Title = 'cite:Terrain']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-1,-1,1,1</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer1)"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode($layer2)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">600</ctl:param>
               <ctl:param name="HeIgHt">600</ctl:param>
               <ctl:param name="ElEvAtIoN">
                  <xsl:value-of select="functions:encode('0/425')"/>
               </ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:NullParser/>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

</ctl:package>
